{"version":3,"file":"component---src-pages-contact-us-tsx-5b6fd468a7c154a1c86f.js","mappings":"wOA0KA,UA5JA,WACE,MAAMA,EAAO,CACXC,KAAM,yBACNC,MAAO,aACPC,UAAW,qDAmBPC,EAA2B,CAC/B,CACEC,KAAM,OACNC,KAAM,OACNC,YAAY,EACZC,YAAa,OAEf,CACEH,KAAM,QACNC,KAAM,QACNC,YAAY,EACZC,YAAa,iBAEf,CACEC,GAAI,SACJJ,KAAM,SACNC,KAAM,OACNC,YAAY,EACZC,YAAa,eACbE,KAAM,gBAER,CACED,GAAI,WACJJ,KAAM,UACNC,KAAM,WACNC,YAAY,EACZC,YAAa,4DA6BjB,OACEG,EAAAA,cAACC,EAAAA,EAAI,KACHD,EAAAA,cAACE,EAAAA,EAAc,MAEfF,EAAAA,cAACG,EAAAA,EAAI,KACHH,EAAAA,cAAA,OAAKI,UAAU,aACbJ,EAAAA,cAAA,OAAKI,UAAU,qBACbJ,EAAAA,cAACK,EAAAA,EAAa,CACZf,KAAMD,EAAKC,KACXC,MAAOF,EAAKE,MAAMe,QAAQ,UAAW,6CACrCd,UAAWH,EAAKG,YAGlBQ,EAAAA,cAACO,EAAAA,GAAM,CACLC,cAAe,CACbd,KAAM,GACNe,MAAO,GACPC,OAAQ,GACRC,QAAS,IAEXC,iBAAkBC,EAAAA,KAAaC,MAAM,CACnCpB,KAAMmB,EAAAA,KACHE,IAAI,EAAG,wCACPC,IAAI,GAAI,0CACRC,SAAS,oBACZR,MAAOI,EAAAA,KAAaJ,MAAM,iBAAiBQ,SAAS,qBACpDP,OAAQG,EAAAA,KACLK,QAAQ,sBAAuB,kBAC/BD,SAAS,sBACZN,QAASE,EAAAA,KACNE,IAAI,EAAG,2CACPC,IAAI,IAAK,8CACTC,SAAS,yBAEdE,SAAUA,CAACC,EAAiBC,IA3DjBC,OAAOF,EAAiBC,KAC7C,IACE,MAAME,EAAW,IAAIC,SACrBC,OAAOC,QAAQN,GAAQO,SAAQC,IAAkB,IAAhBC,EAAKC,GAAMF,EAC1CL,EAASQ,OAAOF,EAAKC,EAAM,IAE7BP,EAASQ,OAAO,YAAa,kBAENC,MAAM,IAAK,CAChCC,OAAQ,OACRC,KAAMX,KAGKY,IACXC,MAAM,iBACNf,EAAQgB,YACRC,OAAOC,SAASC,KAAO,KAEvBJ,MAAM,0BAEV,CAAE,MAAOK,GACPC,QAAQD,MAAM,yBAA0BA,EAC1C,GAqCkDE,CAAevB,EAAQC,KAE9DuB,IAAA,IAAC,OAAEC,EAAM,QAAEC,GAASF,EAAA,OACnB5C,EAAAA,cAAC+C,EAAAA,GAAI,CACHrD,KAAK,UACLuC,OAAO,OACP,eAAa,OACb7B,UAAU,qCAEVJ,EAAAA,cAAA,OAAKI,UAAU,wDACbJ,EAAAA,cAAA,SAAOL,KAAK,SAASD,KAAK,YAAYoC,MAAM,YAE3CrC,EAAWuD,KACVC,IAAA,IAAC,GAAEnD,EAAE,KAAEJ,EAAI,KAAEC,EAAI,WAAEC,EAAU,YAAEC,EAAW,KAAEE,GAAkBkD,EAAA,OAC5DjD,EAAAA,cAACkD,EAAAA,EAAS,CACRrB,IAAK,SAASnC,IACdI,GAAIA,EACJJ,KAAMA,EACNC,KAAMA,EACNC,WAAYA,EACZC,YAAaA,EACb4C,MAAOI,EAAOnD,GACdoD,QAASA,EAAQpD,GACjBK,KAAMA,GACN,KAIRC,EAAAA,cAACmD,EAAAA,EAAS,CACRxD,KAAK,eACLyD,MAAM,SACNC,MAAM,kBACN/D,KAAK,uBAEF,OAQvB,C","sources":["webpack://vladis-mobil-grooming/./src/pages/contact-us.tsx"],"sourcesContent":["import React from 'react';\n\nimport { Main } from 'components/layouts/Main';\nimport { Wave } from 'components/general/Wave';\nimport { SectionHeader } from 'components/general/SectionHeader';\nimport { FormInput } from 'components/general/FormInput';\nimport { ButtonPaw } from 'components/general/Button';\nimport { PlaybarSection } from 'components/sections/PlaybarSection/PlaybarSection';\n\nimport { Formik, Form, FormikHelpers } from 'formik';\nimport * as Yup from 'yup';\n\nimport { navigate } from 'gatsby';\n\nfunction ContactUsPage() {\n  const DATA = {\n    icon: 'icon-sections_contacts',\n    title: 'Contact Us',\n    paragraph: 'Have any questions or concerns? Feel free to ask.'\n  };\n\n  interface ValuesI {\n    name: string;\n    email: string;\n    mobile: string;\n    message: string;\n  }\n\n  interface FormInputI {\n    as?: 'input' | 'textarea' | 'select' | 'mobile';\n    name: keyof ValuesI;\n    type: 'text' | 'email' | 'textarea';\n    isRequired: boolean;\n    placeholder?: string;\n    mask?: string;\n  }\n\n  const formFields: FormInputI[] = [\n    {\n      name: 'name',\n      type: 'text',\n      isRequired: true,\n      placeholder: 'Leo'\n    },\n    {\n      name: 'email',\n      type: 'email',\n      isRequired: true,\n      placeholder: 'leo@gmail.com'\n    },\n    {\n      as: 'mobile',\n      name: 'mobile',\n      type: 'text',\n      isRequired: true,\n      placeholder: '267-977-1310',\n      mask: '999-999-9999'\n    },\n    {\n      as: 'textarea',\n      name: 'message',\n      type: 'textarea',\n      isRequired: true,\n      placeholder: 'Any questions or concerns? Share your thoughts with us.'\n    }\n  ];\n\n  const handleSubmitFn = async (values: ValuesI, actions: FormikHelpers<ValuesI>) => {\n    try {\n      const formData = new FormData();\n      Object.entries(values).forEach(([key, value]) => {\n        formData.append(key, value);\n      });\n      formData.append('form-name', 'contact');\n\n      const response = await fetch('/', {\n        method: 'POST',\n        body: formData\n      });\n\n      if (response.ok) {\n        alert('Message sent!');\n        actions.resetForm();\n        window.location.href = '/';\n      } else {\n        alert('Failed to send message.');\n      }\n    } catch (error) {\n      console.error('Form submission error:', error);\n    }\n  };\n\n  return (\n    <Main>\n      <PlaybarSection />\n\n      <Wave>\n        <div className=\"container\">\n          <div className=\"section-inner-gap\">\n            <SectionHeader\n              icon={DATA.icon}\n              title={DATA.title.replace('Contact', `<span class=\"text-sky-500\">Contact</span>`)}\n              paragraph={DATA.paragraph}\n            />\n\n            <Formik\n              initialValues={{\n                name: '',\n                email: '',\n                mobile: '',\n                message: ''\n              }}\n              validationSchema={Yup.object().shape({\n                name: Yup.string()\n                  .min(2, 'Name should be more than 1 character')\n                  .max(20, 'Name should be less than 20 characters')\n                  .required('Name is required'),\n                email: Yup.string().email('Invalid Email').required('Email is required'),\n                mobile: Yup.string()\n                  .matches(/^\\d{3}-\\d{3}-\\d{4}$/, 'Invalid Mobile')\n                  .required('Mobile is required'),\n                message: Yup.string()\n                  .min(2, 'Message should be more than 1 character')\n                  .max(500, 'Message should be less than 500 characters')\n                  .required('Message is required')\n              })}\n              onSubmit={(values: ValuesI, actions) => handleSubmitFn(values, actions)}\n            >\n              {({ errors, touched }) => (\n                <Form\n                  name=\"contact\"\n                  method=\"POST\"\n                  data-netlify=\"true\"\n                  className=\"section-inner-gap w-full xl:w-1/2\"\n                >\n                  <div className=\"flex flex-col gap-32 bg-white py-64 px-32 rounded-16\">\n                    <input type=\"hidden\" name=\"form-name\" value=\"contact\" />\n\n                    {formFields.map(\n                      ({ as, name, type, isRequired, placeholder, mask }: FormInputI) => (\n                        <FormInput\n                          key={`input_${name}`}\n                          as={as}\n                          name={name}\n                          type={type}\n                          isRequired={isRequired}\n                          placeholder={placeholder}\n                          error={errors[name]}\n                          touched={touched[name]}\n                          mask={mask}\n                        />\n                      )\n                    )}\n                  </div>\n                  <ButtonPaw\n                    type=\"Primary_Blue\"\n                    aType=\"submit\"\n                    label=\"Send my Message\"\n                    icon=\"icon-general_arrow\"\n                  />\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </div>\n      </Wave>\n    </Main>\n  );\n}\n\nexport default ContactUsPage;\n"],"names":["DATA","icon","title","paragraph","formFields","name","type","isRequired","placeholder","as","mask","React","Main","PlaybarSection","Wave","className","SectionHeader","replace","Formik","initialValues","email","mobile","message","validationSchema","Yup","shape","min","max","required","matches","onSubmit","values","actions","async","formData","FormData","Object","entries","forEach","_ref","key","value","append","fetch","method","body","ok","alert","resetForm","window","location","href","error","console","handleSubmitFn","_ref2","errors","touched","Form","map","_ref3","FormInput","ButtonPaw","aType","label"],"sourceRoot":""}